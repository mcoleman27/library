Build the container with build.sh


Testing the user application:

docker run -it --rm batch-test:0.1.0-snapshot run.sh aye bee sea


Testing batchworker.py wrapper, which pulls configs from SQS using the role obtained from metadata service:

docker run -it --rm batch-test:0.1.0-snapshot batchworker.py https://sqs.eu-west-1.amazonaws.com/123456789012/MyQueue


Example config to go in SQS:

{
  "job" : {
    "app" : {
      "directory" : "/app",
      "executable" : "bin/run.sh"
    },
    "results" : {
      "bucket" : "results-bucket-1234",
      "uploadData" : [ "logs", "output" ]
    },
    "id" : 7
  }
}


Example job yaml:

apiVersion: batch/v1
kind: Job
metadata:
  name: test-job
spec:
  parallelism: 1
  template:
    metadata:
      name: test-job
    spec:
      serviceAccountName: my-serviceaccount
      containers:
        - name: batchtest
          image: 123456789012.dkr.ecr.eu-west-1.amazonaws.com/batch-test:0.1.0-snapshot
          env:
            - name: JOB_Q
              value: "https://sqs.eu-west-1.amazonaws.com/123456789012/MyQueue"
            - name: WORKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
          resources:
            limits:
              memory: "2Gi"
            requests:
              memory: "1Gi"
          command: ["batchworker.py"]
          args: ["$(JOB_Q)"]
      restartPolicy: Never



Kubectl example commands

kubectl get jobs --all-namespaces
kubectl apply -f job.yaml -n mynamespace
kubectl get jobs -n mynamespace
kubectl describe jobs -n mynamespace
kubectl logs tbmi-txt4l -n mynamespace
kubectl get events --sort-by='.lastTimestamp' -n mynamespace
kubectl delete job batch-test -n mynamespace



